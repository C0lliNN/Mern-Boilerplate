{"version":3,"sources":["pages/Signup/index.js","assets/images/illustration.png","regex.js"],"names":["Signup","useForm","register","errors","getValues","handleSubmit","dispatch","useDispatch","isLoading","useSelector","state","auth","nameRef","required","value","message","minLength","maxLength","emailRef","pattern","EMAIL_REGEX","passwordRef","passwordConfirmationRef","validate","onSubmit","useCallback","data","e","preventDefault","signupRequest","name","email","password","className","style","width","margin","src","illustration","alt","Group","controlId","Label","Control","ref","placeholder","fontSize","type","confirmPassword","role","disabled"],"mappings":"8NAQe,SAASA,IAAU,IAAD,EACuBC,cAA9CC,EADuB,EACvBA,SAAUC,EADa,EACbA,OAAQC,EADK,EACLA,UAAWC,EADN,EACMA,aAC/BC,EAAWC,cAETC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAA3CH,UAEFI,EAAUV,EAAS,CACvBW,SAAU,CACRC,OAAO,EACPC,QAAS,oBAEXC,UAAW,CACTF,MAAO,EACPC,QAAS,iCAEXE,UAAW,CACTH,MAAO,GACPC,QAAS,2CAIPG,EAAWhB,EAAS,CACxBW,SAAU,CACRC,OAAO,EACPC,QAAS,qBAEXI,QAAS,CACPL,MAAOM,IACPL,QAAS,0BAIPM,EAAcnB,EAAS,CAC3BW,SAAU,CACRC,OAAO,EACPC,QAAS,wBAEXC,UAAW,CACTF,MAAO,EACPC,QAAS,iCAEXE,UAAW,CACTH,MAAO,GACPC,QAAS,+CAIPO,EAA0BpB,EAAS,CACvCW,SAAU,CACRC,OAAO,EACPC,QAAS,gCAEXQ,SAAU,SAACT,GAAD,OACRA,IAAUV,EAAU,aAAe,8BAGjCoB,EAAWC,uBACf,SAACC,EAAMC,GACLA,EAAEC,iBACFtB,EAASuB,YAAcH,EAAKI,KAAMJ,EAAKK,MAAOL,EAAKM,aAErD,CAAC1B,IAGH,OACE,0BAAS2B,UAAU,OAAOC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAA3D,UACE,qBAAKH,UAAU,cAAf,SACE,qBAAKI,IAAKC,IAAcC,IAAI,GAAGN,UAAU,YAE3C,eAAC,IAAD,CAAMT,SAAUnB,EAAamB,GAAWS,UAAU,OAAlD,UACE,eAAC,IAAKO,MAAN,CAAYC,UAAU,OAAtB,UACE,cAAC,IAAKC,MAAN,mBACA,cAAC,IAAKC,QAAN,CACEC,IAAKhC,EACLkB,KAAK,OACLe,YAAY,oBAEb1C,EAAO2B,MACN,sBACEI,MAAO,CAAEY,SAAU,SACnBb,UAAU,iCAFZ,SAIG9B,EAAO2B,KAAKf,aAInB,eAAC,IAAKyB,MAAN,CAAYC,UAAU,QAAtB,UACE,cAAC,IAAKC,MAAN,oBACA,cAAC,IAAKC,QAAN,CACEC,IAAK1B,EACL2B,YAAY,mBACZf,KAAK,UAEN3B,EAAO4B,OACN,sBACEG,MAAO,CAAEY,SAAU,SACnBb,UAAU,iCAFZ,SAIG9B,EAAO4B,MAAMhB,aAIpB,eAAC,IAAKyB,MAAN,CAAYC,UAAU,WAAtB,UACE,cAAC,IAAKC,MAAN,uBACA,cAAC,IAAKC,QAAN,CACEb,KAAK,WACLiB,KAAK,WACLH,IAAKvB,EACLwB,YAAY,wBAEb1C,EAAO6B,UACN,sBACEE,MAAO,CAAEY,SAAU,SACnBb,UAAU,iCAFZ,SAIG9B,EAAO6B,SAASjB,aAIvB,eAAC,IAAKyB,MAAN,CAAYC,UAAU,kBAAtB,UACE,cAAC,IAAKC,MAAN,+BACA,cAAC,IAAKC,QAAN,CACEb,KAAK,kBACLiB,KAAK,WACLH,IAAKtB,EACLuB,YAAY,yBAEb1C,EAAO6C,iBACN,sBACEd,MAAO,CAAEY,SAAU,SACnBb,UAAU,iCAFZ,SAIG9B,EAAO6C,gBAAgBjC,aAI9B,cAAC,IAAD,CACEkB,UAAU,iBACVc,KAAK,SACLE,KAAK,SACLC,SAAU1C,EAJZ,4B,gCChJO,QAA0B,0C,gCCAzC,kCAEO,IAAMY,EAAc","file":"static/js/6.4fac9a98.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport illustration from '../../assets/images/illustration.png';\nimport { EMAIL_REGEX } from '../../regex';\nimport { signupRequest } from '../../store/modules/auth/action';\n\nexport default function Signup() {\n  const { register, errors, getValues, handleSubmit } = useForm();\n  const dispatch = useDispatch();\n\n  const { isLoading } = useSelector((state) => state.auth);\n\n  const nameRef = register({\n    required: {\n      value: true,\n      message: 'Name is required',\n    },\n    minLength: {\n      value: 3,\n      message: 'At least 3 chars are required',\n    },\n    maxLength: {\n      value: 40,\n      message: 'Only names up to 40 chars are allowed',\n    },\n  });\n\n  const emailRef = register({\n    required: {\n      value: true,\n      message: 'Email is required',\n    },\n    pattern: {\n      value: EMAIL_REGEX,\n      message: 'Invalid email format',\n    },\n  });\n\n  const passwordRef = register({\n    required: {\n      value: true,\n      message: 'Password is required',\n    },\n    minLength: {\n      value: 6,\n      message: 'At least 6 chars are required',\n    },\n    maxLength: {\n      value: 64,\n      message: 'Only passwords up to 64 chars are allowed',\n    },\n  });\n\n  const passwordConfirmationRef = register({\n    required: {\n      value: true,\n      message: 'Confirm Password is required',\n    },\n    validate: (value) =>\n      value === getValues('password') || \"The password don't match\",\n  });\n\n  const onSubmit = useCallback(\n    (data, e) => {\n      e.preventDefault();\n      dispatch(signupRequest(data.name, data.email, data.password));\n    },\n    [dispatch],\n  );\n\n  return (\n    <section className=\"mt-5\" style={{ width: '250px', margin: 'auto' }}>\n      <div className=\"text-center\">\n        <img src={illustration} alt=\"\" className=\"w-100\" />\n      </div>\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"mt-3\">\n        <Form.Group controlId=\"name\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            ref={nameRef}\n            name=\"name\"\n            placeholder=\"Enter your name\"\n          />\n          {errors.name && (\n            <span\n              style={{ fontSize: '0.8em' }}\n              className=\"text-danger font-weight-bolder\"\n            >\n              {errors.name.message}\n            </span>\n          )}\n        </Form.Group>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            ref={emailRef}\n            placeholder=\"Enter your email\"\n            name=\"email\"\n          />\n          {errors.email && (\n            <span\n              style={{ fontSize: '0.8em' }}\n              className=\"text-danger font-weight-bolder\"\n            >\n              {errors.email.message}\n            </span>\n          )}\n        </Form.Group>\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            name=\"password\"\n            type=\"password\"\n            ref={passwordRef}\n            placeholder=\"Enter your password\"\n          />\n          {errors.password && (\n            <span\n              style={{ fontSize: '0.8em' }}\n              className=\"text-danger font-weight-bolder\"\n            >\n              {errors.password.message}\n            </span>\n          )}\n        </Form.Group>\n        <Form.Group controlId=\"confirmPassword\">\n          <Form.Label>Confirm Password</Form.Label>\n          <Form.Control\n            name=\"confirmPassword\"\n            type=\"password\"\n            ref={passwordConfirmationRef}\n            placeholder=\"Confirm the Password\"\n          />\n          {errors.confirmPassword && (\n            <span\n              style={{ fontSize: '0.8em' }}\n              className=\"text-danger font-weight-bolder\"\n            >\n              {errors.confirmPassword.message}\n            </span>\n          )}\n        </Form.Group>\n        <Button\n          className=\"btn-block mt-4\"\n          type=\"submit\"\n          role=\"button\"\n          disabled={isLoading}\n        >\n          Signup\n        </Button>\n      </Form>\n    </section>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/illustration.56375930.png\";","/* eslint-disable import/prefer-default-export */\r\n/* eslint-disable no-useless-escape */\r\nexport const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n"],"sourceRoot":""}