{"version":3,"sources":["pages/Home/index.js"],"names":["initialState","isLoading","todos","error","ASYNC_START","GET_TODOS_SUCCESS","GET_TODOS_FAILED","ADD_TODO_SUCCESS","COMPLETE_TODO_SUCCESS","DELETE_TODO_SUCCESS","reducer","state","action","type","concat","todo","i","findIndex","p","id","todoId","completed","filter","Home","useReducer","dispatch","useState","showCreateItemModal","setShowCreateItemModal","showItemDetailsModal","setShowItemDetailsModal","selectedTodo","setSelectedTodo","token","useSelector","s","auth","useForm","register","errors","handleSubmit","titleRef","required","value","message","minLength","maxLength","descriptionRef","getTodos","useCallback","a","api","get","headers","Authorization","data","errorMessage","response","useEffect","openCreateModal","closeCreateModal","handleAddTodo","e","preventDefault","post","Swal","fire","showDetailsModal","closeDetailsModal","handleCompleteTodo","patch","handleDeleteTodo","delete","content","className","variant","length","map","title","size","onClick","show","onHide","Header","closeButton","Title","onSubmit","Body","Group","controlId","Label","Control","name","ref","placeholder","style","fontSize","as","description","Footer","disabled"],"mappings":"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","file":"static/js/7.a912cd38.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useReducer, useState } from 'react';\nimport { Alert, Button, Form, Modal } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport { MdDelete, MdInfoOutline, MdDone } from 'react-icons/md';\nimport api from '../../services/api';\nimport Spinner from '../../components/Spinner';\n\nconst initialState = {\n  isLoading: false,\n  todos: [],\n  error: null,\n};\n\nconst ASYNC_START = 'ASYNC_START';\nconst GET_TODOS_SUCCESS = 'GET_TODOS_SUCCESS';\nconst GET_TODOS_FAILED = 'GET_TODOS_FAILED';\nconst ADD_TODO_SUCCESS = 'ADD_TODO_SUCCESS';\nconst COMPLETE_TODO_SUCCESS = 'COMPLETE_TODO_SUCCESS';\nconst DELETE_TODO_SUCCESS = 'DELETE_TODO_SUCCESS';\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case ASYNC_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case GET_TODOS_SUCCESS:\n      return {\n        isLoading: false,\n        todos: action.todos,\n        error: null,\n      };\n    case GET_TODOS_FAILED:\n      return {\n        isLoading: false,\n        todos: [],\n        error: action.error,\n      };\n    case ADD_TODO_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        todos: state.todos.concat([action.todo]),\n      };\n    case COMPLETE_TODO_SUCCESS: {\n      const todos = [...state.todos];\n      const i = todos.findIndex((p) => p.id === action.todoId);\n      todos[i].completed = true;\n      return {\n        ...state,\n        todos,\n        isLoading: false,\n      };\n    }\n    case DELETE_TODO_SUCCESS:\n      return {\n        ...state,\n        todos: state.todos.filter((p) => p.id !== action.todoId),\n        isLoading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default function Home() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const { isLoading, error, todos } = state;\n\n  const [showCreateItemModal, setShowCreateItemModal] = useState(false);\n  const [showItemDetailsModal, setShowItemDetailsModal] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState();\n\n  const { token } = useSelector((s) => s.auth);\n\n  const { register, errors, handleSubmit } = useForm();\n\n  const titleRef = register({\n    required: {\n      value: true,\n      message: 'Title is required',\n    },\n    minLength: {\n      value: 5,\n      message: 'Title must have at least 5 chars',\n    },\n    maxLength: {\n      value: 100,\n      message: 'Title must have at most 100 chars',\n    },\n  });\n\n  const descriptionRef = register({\n    minLength: {\n      value: 5,\n      message: 'Description must have at least 5 chars',\n    },\n    maxLength: {\n      value: 255,\n      message: 'Description must have at most 255 chars',\n    },\n  });\n\n  const getTodos = useCallback(async () => {\n    dispatch({ type: ASYNC_START });\n    try {\n      const { data } = await api.get('/todos', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      dispatch({ type: GET_TODOS_SUCCESS, todos: data });\n    } catch (err) {\n      const errorMessage = err.response\n        ? err.response.data.message\n        : err.message;\n      dispatch({ type: GET_TODOS_FAILED, error: errorMessage });\n    }\n  }, [token]);\n\n  useEffect(() => {\n    getTodos();\n  }, [getTodos]);\n\n  const openCreateModal = useCallback(() => {\n    setShowCreateItemModal(true);\n  }, []);\n\n  const closeCreateModal = useCallback(() => {\n    setShowCreateItemModal(false);\n  }, []);\n\n  const handleAddTodo = useCallback(\n    async (data, e) => {\n      e.preventDefault();\n      dispatch({ type: ASYNC_START });\n      try {\n        const { data: todo } = await api.post('/todos', data, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        dispatch({ type: ADD_TODO_SUCCESS, todo });\n        closeCreateModal();\n      } catch (err) {\n        const errorMessage = err.response\n          ? err.response.data.message\n          : err.message;\n        Swal.fire('Error!', errorMessage, 'error');\n      }\n    },\n    [token, closeCreateModal],\n  );\n\n  const showDetailsModal = useCallback((todo) => {\n    setShowItemDetailsModal(true);\n    setSelectedTodo(todo);\n  }, []);\n\n  const closeDetailsModal = useCallback(() => {\n    setShowItemDetailsModal(false);\n  }, []);\n\n  const handleCompleteTodo = useCallback(\n    async (todoId) => {\n      dispatch({ type: ASYNC_START });\n      try {\n        await api.patch(\n          `/todos/${todoId}/complete`,\n          {},\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          },\n        );\n\n        dispatch({ type: COMPLETE_TODO_SUCCESS, todoId });\n      } catch (err) {\n        const errorMessage = err.response\n          ? err.response.data.message\n          : err.message;\n        Swal.fire('Error!', errorMessage, 'error');\n      }\n    },\n    [token],\n  );\n\n  const handleDeleteTodo = useCallback(\n    async (todoId) => {\n      dispatch({ type: ASYNC_START });\n      try {\n        await api.delete(`/todos/${todoId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        dispatch({ type: DELETE_TODO_SUCCESS, todoId });\n      } catch (err) {\n        const errorMessage = err.response\n          ? err.response.data.message\n          : err.message;\n        Swal.fire('Error!', errorMessage, 'error');\n      }\n    },\n    [token],\n  );\n\n  let content = null;\n\n  if (isLoading) {\n    content = (\n      <div className=\"d-flex align-items-center justify-content-center\">\n        <Spinner />\n      </div>\n    );\n  } else if (error) {\n    content = <Alert variant=\"danger\">Error: {error}</Alert>;\n  } else if (todos.length) {\n    content = (\n      <ul className=\"list-group\">\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            className=\"list-group-item d-flex align-items-center justify-content-between\"\n          >\n            <span>{todo.title}</span>\n            <div>\n              {!todo.completed && (\n                <Button\n                  size=\"sm p-1\"\n                  variant=\"success\"\n                  title=\"Complete\"\n                  onClick={() => handleCompleteTodo(todo.id)}\n                >\n                  <MdDone size={20} />\n                </Button>\n              )}\n              <Button\n                size=\"sm p-1 mx-1\"\n                variant=\"primary\"\n                title=\"Info\"\n                onClick={() => showDetailsModal(todo)}\n              >\n                <MdInfoOutline size={20} />\n              </Button>\n              <Button\n                size=\"sm p-1\"\n                variant=\"danger\"\n                title=\"Delete\"\n                onClick={() => handleDeleteTodo(todo.id)}\n              >\n                <MdDelete size={20} />\n              </Button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    );\n  } else {\n    content = <Alert variant=\"secondary\">No Todos Yet</Alert>;\n  }\n\n  return (\n    <section className=\"my-4 container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card rounded-lg\">\n            <div className=\"card-body\">\n              <div className=\"d-flex align-items-center justify-content-between mb-3\">\n                <h2 className=\"h3 text-primary\">Todos</h2>\n                <Button variant=\"success\" onClick={openCreateModal}>\n                  New\n                </Button>\n              </div>\n              {content}\n            </div>\n          </div>\n        </div>\n        <Modal show={showCreateItemModal} onHide={closeCreateModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Create Todo</Modal.Title>\n          </Modal.Header>\n          <Form onSubmit={handleSubmit(handleAddTodo)}>\n            <Modal.Body>\n              <Form.Group controlId=\"title\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control\n                  name=\"title\"\n                  ref={titleRef}\n                  placeholder=\"Todo Title\"\n                />\n                {errors.title && (\n                  <span\n                    style={{ fontSize: '0.8em' }}\n                    className=\"text-danger font-weight-bolder\"\n                  >\n                    {errors.title.message}\n                  </span>\n                )}\n              </Form.Group>\n              <Form.Group controlId=\"description\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  name=\"description\"\n                  ref={descriptionRef}\n                  placeholder=\"Todo Description\"\n                />\n                {errors.description && (\n                  <span\n                    style={{ fontSize: '0.8em' }}\n                    className=\"text-danger font-weight-bolder\"\n                  >\n                    {errors.description.message}\n                  </span>\n                )}\n              </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={closeCreateModal}>\n                Close\n              </Button>\n              <Button type=\"submit\" variant=\"success\" disabled={isLoading}>\n                Create\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n        <Modal show={showItemDetailsModal} onHide={closeDetailsModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Todo Info</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p className=\"text-muted mb-1 font-weight-bolder\">Title</p>\n            <p>{selectedTodo?.title}</p>\n            <p className=\"text-muted mb-1 font-weight-bolder\">Description</p>\n            <p>{selectedTodo?.description}</p>\n            <p className=\"text-muted mb-1 font-weight-bolder\">Status</p>\n            {selectedTodo?.completed ? (\n              <p className=\"text-success font-weight-bolder\">Completed</p>\n            ) : (\n              <p className=\"text-danger font-weight-bolder\">Open</p>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={closeDetailsModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    </section>\n  );\n}\n"],"sourceRoot":""}